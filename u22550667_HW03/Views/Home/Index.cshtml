@model u22550667_HW03.Models.HomeViewModel
@using PagedList.Mvc;
@using PagedList;

@{
    ViewBag.Title = "Home Page";
}
<main>
    <div class="container-fluid p-0">
        <div class="row g-0">
            <!-- Students Section -->
            <div class="col-12 col-md-6 vh-100 overflow-auto">
                <!-- Full-height column -->
                <h2 class="p-3 m-0 text-danger">Students</h2>
                <div class="p-3">
                    <a class="create-link btn btn-dark mb-3" data-url="@Url.Action("Create", "students")">Create</a>
                    <div class="table-responsive bg-dark text-white p-3 rounded">
                        <table class="table table-dark w-100">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Surname</th>
                                    <th>Birth Date</th>
                                    <th>Gender</th>
                                    <th>Class</th>
                                    <th>Point</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var students in Model.Students)
                                {
                                    <tr>
                                        <td>@Html.DisplayFor(modelItem => students.name)</td>
                                        <td>@Html.DisplayFor(modelItem => students.surname)</td>
                                        <td>@Html.DisplayFor(modelItem => students.birthdate)</td>
                                        <td>@Html.DisplayFor(modelItem => students.gender)</td>
                                        <td>@Html.DisplayFor(modelItem => students.@class)</td>
                                        <td>@Html.DisplayFor(modelItem => students.point)</td>
                                        <td>
                                            <a href="#" class="details-link btn btn-danger" data-url="@Url.Action("Details", "students", new { id = students.studentId })">Details</a>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
            <!-- Books Section -->
            <div class="col-12 col-md-6 vh-100">
                <!-- Full-height column -->
                <h2 class="text-danger p-3 m-0">Books</h2>
                <div class="p-3">
                    <a class="create-link btn btn-dark mb-3" data-url="@Url.Action("Create", "books")">Create</a>
                    <div class="table-responsive bg-dark text-white p-3 rounded">
                        <table class="table table-dark w-100">
                            <thead>
                                <tr>
                                    <th>Book Name</th>
                                    <th>Page Count</th>
                                    <th>Point</th>
                                    <th>Author Name</th>
                                    <th>Book Type</th>
                                    <th></th>
                                </tr>
                            </thead>
                            <tbody>
                                @foreach (var book in Model.Books)
                                {
                                    <tr>
                                        <td>@Html.DisplayFor(modelItem => book.name)</td>
                                        <td>@Html.DisplayFor(modelItem => book.pagecount)</td>
                                        <td>@Html.DisplayFor(modelItem => book.point)</td>
                                        <td>@Html.DisplayFor(modelItem => book.author.name)</td>
                                        <td>@Html.DisplayFor(modelItem => book.type.name)</td>
                                        <td>
                                            <a href="#" class="details-link btn btn-danger" data-url="@Url.Action("Details", "books", new { id = book.bookId })">Details</a>
                                        </td>
                                    </tr>
                                }
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!--Pagination section-->

    <div class="container">
        <div class="row">
            <div class="col-md-6">

                <div class="pagination-lg ">
                    @if (ViewBag.TotalStudentPages > 1)
                    {
                        int maxPagesToShow = 10; // Maximum number of pages to display at once
                        int currentPage = ViewBag.CurrentStudentPage;
                        int totalPages = ViewBag.TotalStudentPages;

                        // Calculate the start and end page numbers for pagination
                        int startPage = Math.Max(1, currentPage - maxPagesToShow / 2);
                        int endPage = Math.Min(totalPages, startPage + maxPagesToShow - 1);
                        startPage = Math.Max(1, endPage - maxPagesToShow + 1);

                        // Show "Previous" button if not on the first page
                        if (currentPage > 1)
                        {
                            @Html.ActionLink("« Previous", "Index", new { page = currentPage - 1, bookPage = ViewBag.CurrentBookPage }, new { @class = "btn btn-dark" })
                        }

                        // Show individual page numbers
                        for (int i = startPage; i <= endPage; i++)
                        {
                            if (i == currentPage)
                            {
                                <strong class="btn btn-danger active">@i</strong> <!-- Current page -->
                            }
                            else
                            {
                                @Html.ActionLink(i.ToString(), "Index", new { page = i, bookPage = ViewBag.CurrentBookPage }, new { @class = "btn btn-dark" })
                            }
                        }

                        // Show "Next" button if not on the last page
                        if (currentPage < totalPages)
                        {
                            @Html.ActionLink("Next »", "Index", new { page = currentPage + 1, bookPage = ViewBag.CurrentBookPage }, new { @class = "btn btn-dark" })
                        }
                    }
                </div>
            </div>
            <div class="col-md-6">

                <!-- Pagination controls for Books -->
                <div class="pagination-lg">
                    @if (ViewBag.TotalBookPages > 1)
                    {
                        int maxPagesToShow = 10; // Maximum number of pages to display at once
                        int currentPage = ViewBag.CurrentBookPage;
                        int totalPages = ViewBag.TotalBookPages;

                        // Calculate the start and end page numbers for pagination
                        int startPage = Math.Max(1, currentPage - maxPagesToShow / 2);
                        int endPage = Math.Min(totalPages, startPage + maxPagesToShow - 1);
                        startPage = Math.Max(1, endPage - maxPagesToShow + 1);

                        // Show "Previous" button if not on the first page
                        if (currentPage > 1)
                        {
                            @Html.ActionLink("« Previous", "Index", new { page = ViewBag.CurrentStudentPage, bookPage = currentPage - 1 }, new { @class = "btn btn-dark" })
                        }

                        // Show individual page numbers
                        for (int i = startPage; i <= endPage; i++)
                        {
                            if (i == currentPage)
                            {
                                <strong class="btn btn-danger active">@i</strong> <!-- Current page -->
                            }
                            else
                            {
                                @Html.ActionLink(i.ToString(), "Index", new { page = ViewBag.CurrentStudentPage, bookPage = i }, new { @class = "btn btn-dark" })
                            }
                        }

                        // Show "Next" button if not on the last page
                        if (currentPage < totalPages)
                        {
                            @Html.ActionLink("Next »", "Index", new { page = ViewBag.CurrentStudentPage, bookPage = currentPage + 1 }, new { @class = "btn btn-dark" })
                        }
                    }
                </div>

            </div>
        </div>
    </div>

    <div id="myModal" class="modal fade" tabindex="-1">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">To Do List</h5>
                    <button type="button" class="btn btn-danger" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body" id="modal-content">
                </div>
            </div>
        </div>
    </div>

</main>
@section Scripts {
    <script>
        $(function () {
            // Function to handle Edit link click event in the Combined View and Details modal
            $(".edit-link, .edit-link-in-modal").click(function (e) {
                e.preventDefault();
                var url = $(this).data("url");

                $.get(url, function (data) {
                    $("#modal-content").empty();
                    $("#modal-content").html(data);

                    // Initialize and show the modal using Bootstrap 5's JavaScript API
                    var myModal = new bootstrap.Modal(document.getElementById('myModal'));
                    myModal.show();
                });
            });

            // Function to handle form submission within the modal
            $("#modal-content").on("submit", "form", function (e) {
                e.preventDefault();
                var form = $(this);
                var url = form.attr("action");
                var formData = form.serialize();

                $.post(url, formData, function (data) {
                    // Hide the modal using Bootstrap 5's JavaScript API
                    var myModal = bootstrap.Modal.getInstance(document.getElementById('myModal'));
                    myModal.hide();

                    // Reload the page to reflect the changes
                    location.reload();
                });
            });

            // Function to handle other links (details, delete, create) within the modal
            $(".details-link, .delete-link, .create-link, .create-lookup-link").click(function (e) {
                e.preventDefault();
                var url = $(this).data("url");

                $.get(url, function (data) {
                    $("#modal-content").empty();
                    $("#modal-content").html(data);

                    // Initialize and show the modal using Bootstrap 5's JavaScript API
                    var myModal = new bootstrap.Modal(document.getElementById('myModal'));
                    myModal.show();
                });
            });
        });
    </script>
}

